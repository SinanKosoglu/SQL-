1.SQL DATA TYPES

Metinsel (String) Veri Tipleri

-CHAR: Sabit uzunluktaki metin verilerini tanımlamak için kullanılır. Örnek kullanım; CHAR(20) şeklindedir. Burada giriş yapılacak metin uzunluğu en fazla 20 karakter olabilir. Eğer metin 20 karakterden daha uzunsa geri kalan kısım atlanır. Eğer metin 20 karakterden kısaysa kalan kısımlar boşlukla doldurulur.

-VARCHAR: Değişken uzunluktaki metin verilerini tanımlamak için kullanılır. Örnek kullanım VARCHAR(255) şeklindedir. 255 karakter uzunluğunda bir metin alanı oluşturulur. Eğer giriş verisi 20 karakter uzunluğundaysa yalnızca 20 karakterlik alan tutulur.

-TEXT: Uzun metin verileri için kullanılır. CHAR ve VARCHAR'a göre daha uzun karakterdeki metin verilerini saklar. Bir makale veya bildiri içeriği TEXT karakteri olarak tanımlanabilir. Max. 2^32-1 (4GB) veri saklayabilir.

Sayısal (Numeric) Veri Tipleri

-INTEGER(INT): Bir kişinin yaşı, ürün adet sayısı gibi tam sayıları tanımlamak için kullanılır. Genellikle 4 byte'lık bir veri tipidir. -2^31 ile 2^31-1 arasında bir sayı saklayabilir.

-SMALLINT: Küçük tam sayılar için kullanılır. bir ürünün stok miktarını saklamak için SMALLINT kullanılabilir. genellikle 2 byte'lık bir veri tipidir ve -2^15 ile 2^15-1 arasında bir sayı saklayabilir.

-BIGINT: Büyük tam sayılar için kullanılır. Örneğin, bir ülkenin nüfusunu saklamak için BIGINT kullanılabilir. BIGINT veri tipi genellikle 8 byte'lık bir veri tipidir ve -2^63 ile 2^63-1 arasında bir sayı saklayabilir.

-FLOAT: Ondalıklı sayılar için kullanılır. Örneğin, bir ürünün fiyatını saklamak için FLOAT kullanılabilir. FLOAT veri tipi genellikle 4 byte'lık bir veri tipidir ve ondalık noktasına kadar 7 veya 8 hane hassasiyette bir sayı saklayabilir.

-DECIMAL: Ondalıklı sayıları sabit bir hassasiyette saklar. Örneğin, DECIMAL(10,2) veri tipi, en fazla 10 rakamlı ve 2 ondalıklı sayıları saklar. Bu veri tipi, hassasiyet ve doğruluğu ön planda tutan uygulamalar için idealdir. Finansal hesaplamalar için DECIMAL(10,4) veri tipini kullanabilirsiniz.

-DOUBLE PRECISION:Ondalıklı sayıları daha yüksek bir hassasiyette saklar. Bu veri tipi, daha büyük sayıları ve daha yüksek hassasiyeti gerektiren uygulamalar için idealdir. Bir fiziksel ölçüm için DOUBLE PRECISION kullanabilirsiniz.
BOOLEN VERI TIPI
  BOOLEAN veri tipi, true/false (doğru/yanlış) değerlerini saklamak için kullanılır. Bu veri tipi, sadece iki değer alabilir: true ve false.
    •	Bir kullanıcının hesabının aktif/deaktif durumunu saklamak için
    •	Bir ürünün stokta/stokta olmadığı durumunu saklamak için
    •	Bir sorunun çözüldü/çözülmedi durumunu saklamak için

https://private-user-images.githubusercontent.com/140150167/277178652-8c4cb3fb-d636-4a6e-9a61-4926641073dc.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDYzNjY2MzYsIm5iZiI6MTcwNjM2NjMzNiwicGF0aCI6Ii8xNDAxNTAxNjcvMjc3MTc4NjUyLThjNGNiM2ZiLWQ2MzYtNGE2ZS05YTYxLTQ5MjY2NDEwNzNkYy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMTI3JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDEyN1QxNDM4NTZaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1iZjI4NGU3MTk1YjNmMjFiZmRhNjcwMDYyNGJmNDlhNDVmZjYxYWMyOGM3NmY0ZDMwNjMzMGZlM2ZiNWY3NzdiJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.5kqbuEw573saWpCdk3rSUMPb8EagJzeFmhE2qF2gbv8

TARİH VE ZAMAN VERİ TİPLERİ
  Bu veri tipi tarih ve zaman verilerini saklar.
    DATE: Sadece tarih bilgisi saklanır '2023-12-31' . İşe giriş tarihi veya son kullanma tarihi gibi.

    TIME: Sadece saat bilgisi saklanır '13:25:59'. Sipariş zamanı gibi.

    DATETIME: Tarih ve saat bilgisi birlikte saklanır '2023-12-31 13:25:59' 

    TIMESTAMP: Tarih, saat ve zaman dilimi bilgilerini saklar '2023-12-31 13:25:59 UTC'

    INTERVAL: Zaman aralığı saklar. '2 years 3 months 4 days' gibi

### **JSON Veri Tipleri**

    **JSON:** JSON verilerini saklar. JSON veri tipi, verileri düz metin olarak saklar. 
            Bu, verilerin daha sonra okunması ve sorgulanması için JSONB’den daha yavaş olabilir.

    Örnek: '{"isim":"Ahmet","yas":25}'

    **JSONB**: Binary JSON verilerini saklar.JSONB veri tipi, verileri binary (ikili) formatında saklar. 
              Bu veri tipi JSON veri tipinden daha hızlı ve daha az bellek kullanır.

    Örnek: '{"isim":"Ahmet","yas":25}'

    **Bu veri tipleri, SQL sorguları ile kullanılabildiği gibi, daha esnek ve hızlı bir şekilde JSON verileri saklamak için kullanılabilir.**

    Örneğin, PostgreSQL gibi bazı SQL veritabanları, JSON veri tipleri ile birlikte gelir ve JSON verilerini sorgulamak için özel operatörler sunar.

ARRAY VERİ TİPİ
  SQL veritabanlarında, array veri tipleri bir dizi (koleksiyon) içinde birden çok veriyi saklamak için kullanılır. 
  Array veri tipleri, bir kolon içinde birden çok veriyi saklamak için kullanılabilir. 
  Genellikle bir tablo içinde bir kullanıcının birden çok özelliğini saklayabilir. 
  Örneğin bir web sitesindeki kullanıcının bir veya birden çok telefon numarasını saklamak için array veri tipi kullanılabilir.
